name: Build Module

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
    paths:
      - src/**
      - tests/**
      - build.ps1
      - .github/workflows/build.yml

  workflow_dispatch:

env:
  PROJECT_URI: https://github.com/${{ github.repository}}
  MODULE_VERSION: v1.0.0
  RELEASE_NOTES: No release notes provided

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install InvokeBuild Module
      shell: pwsh
      run: Install-Module -Name InvokeBuild -Force

    - name: Set Environment Variables
      shell: pwsh
      run: |
        Import-Module ./src/AzGhOps.psm1

        Set-GhVariable -Name REPO_NAME -Value '${{ github.repository }}'.Split('/')[1]

        if ('${{ github.ref }}' -match 'refs/tags/v(?<moduleVersion>\d+\.\d+\.\d+)')
        {
          $moduleVersion = '${{ github.ref }}'.Split('/')[-1]
          Set-GhVariable -Name MODULE_VERSION -Value $moduleVersion
          Set-GhVariable -Name RELEASE_NOTES -Value ('${{ github.workspace }}/Releases/{0}.md' -f $moduleVersion)
        }

    - name: Build Module
      shell: pwsh
      run: Invoke-Build -File ./build.ps1 -Task Test, Build
      continue-on-error: false

    - name: Upload Code Coverage
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: ${{ github.workspace }}/tests/coverage.xml

    - name: Upload Built Module
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.REPO_NAME }}-${{ env.MODULE_VERSION }}
        path: ${{ github.workspace }}/output

    - name: Publish Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body_path: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: false

    - name: Publish Module
      if: startsWith(github.ref, 'refs/tags/')
      shell: pwsh
      run: |
        $modulePath = Join-Path -Path ${{ github.workspace }} -ChildPath 'output' -AdditionalChildPath '${{ env.REPO_NAME }}'
        $moduleVersionPath = Join-Path -Path $modulePath -ChildPath '${{ env.MODULE_VERSION }}'.TrimStart('v')

        if (Test-Path -Path $moduleVersionPath)
        {
          Write-Host -Object ("Publishing '{0}' to PSGallery" -f $moduleVersionPath)

          $publishModuleParams = @{
            Path        = $moduleVersionPath
            NuGetApiKey = ${{ secrets.NUGET_API_KEY }}
            Repository  = 'PSGallery'
            Force       = $true
          }

          Publish-Module @publishModuleParams
        }
